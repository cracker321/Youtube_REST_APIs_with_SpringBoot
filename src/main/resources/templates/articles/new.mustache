<!--
폼 태그에서 세 개의 입력값을 입력
1.input 태그
2.textarea 태그
3.'폼 태그'를 '컨트롤러'에 던져주기 위한 button 태그
-->

<!--'form 데이터'가 'DTO 객체'를 거쳐 '컨트롤러'에 전달됨-->
<!--
1.action="/articles/create"
2.method="post" 방식
-->


<!--
< 사용자 현재화면: 아직 입력 전 >
1.사용자가 'http://localhost:9090/articles/new'를 입력하면 '컨트롤러 @GetMapping("/articles/new")'로 전달되고('dto객체'를 통해),
2.'컨트롤러 @GetMapping("/articles/new")'의 리턴값이 'return "articles/new";'이니깐, 여기 '뷰 new.mustache'로 전달되어 사용자에게
해당하는 화면을 뿌려서 사용자가 무언가를 입력할 수 있게 되고,


< 사용자 현재화면: 'http://localhost:9090/articles/new' >
3. 사용자가 여기 '뷰 new.mustache'에서 무언가를 입력하고 'submit'을 누른다면, 아래의
(1)action="/articles/create"  (사용자에게 무슨 화면을 보여줄지(URL을 어디로 보내줄지))
(2)method="post" 방식  (어떻게 보여줄지: 'CRUD'의 'Create(생성)' = 'HTTP'의 'POST(생성. @PostMapping)')
로직을 통해서,
이제 사용자에게 'http://localhost:9090/articles/create' 를 보여준다.


< 사용자 현재화면: 'http://localhost:9090/articles/create' >
4.그리고, '컨트롤러 '@GetMapping("/articles/create")'의 리턴값이 'return "redirect:/articles/" + saved.getId();' 이기에,
('saved.getId()' 는 db로부터 '변수 id 값을 가져오는 로직인 듯(?. 13강 중간). 이 'getId()'를 실행시키기 위해서는 '게터'가 필요함)
이 '리다이렉트'를 통해서,
5.이제 사용자에게  'http://localhost:9090/articles/{id}' 를 보여준다
(여기서 {id}는 '변수 id'로, '1', '51533', '492503' 등).
(그리고, 여기서 '컨트롤러 @GetMapping("/articles/{id})'로 연결되고, 이 컨트롤러의 리턴값이 'return "articles/show"'이기 때문에
당연히, '뷰 show.mustache'속 로직을 따라, 'title', 'content'관련 내용이 보여진다.)


< 사용자 현재화면: 'http://localhost:9090/articles/{id}' >
6.이제, 사용자가 'http://localhost:9090/articles/new' 화면에서 'title'과 'content'에 무언가를 입력한다면,
7.이제 사용자가 처음으로 'title', 'content'를 입력할 때는 'http://localhost:9090/articees/1',
다시 돌아와서 새로운 'title', 'content'를 입력할 때는 'http://localhost:9090/articees/2',
그 다음 새로운 'title', 'content'를 입력할 때는 'http://localhost:9090/articees/3', ... 이렇게 '리다이렉트' 해준다.
이것은 결국엔 어쨌든, '뷰 show.mustache'의 로직에 따르고 있는 것임.


< 사용자 현재화면: 'http://localhost:9090/articles/{id}' > : 게시판(articles)으로 돌아가기 미션
8.사용자가 기존 게시글 리스트 화면('http://localhost:9090/articles')으로 '돌아가기를' 원한다면,
현재 '뷰 show.mustache'에  '<a href="/articles">Go to Article List</a>'를 추가해줘서,
'Go to Article List'탭을 만들고, 이걸 누르면
이제 사용자에게 'http://localhost:9090/articles' 를 보여준다.


< 사용자 현재화면: 'http://localhost:9090/articles' > : '게시글 상세'로 들어가기 미션
9.'게시글 목록' 관련 '뷰 페이지'는 '뷰 index.mustache'이므로, 여기 '뷰 페이지'에서 작업하기
10.'title'에 '링크를 걸어주면 됨':
 1)기존의 '<td>{title}</td>'를   //'대괄호 {}' 이거 원래 '두 개씩' 써야 하는데, 여기에 그렇게 쓰면 주석 달아도 에러나서 하나만 쓰기.
 2)새롭게 '<td><a href="/articles/{id}">{title}</a></td>' 이렇게 수정해주면 된다.
 cf) 'a'태그의 '속성 href'는 '요청을 보낼(다른 링크로 사용자를 넘겨줄) 링크 주소를 가지고 있음'. 즉, '다른 링크로 사용자를 넘겨주는 역할'을 하는 태그임.
이렇게 하면, 게시판에서 사용자가 개별 게시글을 클릭했을 때,
이제 사용자에게
http://localhost:9090/articles/1  : 1번 게시글
http://localhost:9090/articles/2  : 2번 게시글
..
이렇게 '개별 게시글의 상세 내역' 링크로 사용자에게 보내주어, 사용자가 '개별 게시글 상세 내역'을 볼 수 있도록 해준다.


< > : '개별 게시글 상세'에서 '수정'하기 미션
10.'개별 게시글 상세' 관련 뷰 페이지는 'show.mustache'이기 때문에,
여기에 '<a href="/articles/{article.id}/edit">Edit</a>' 추가해주면, 'Edit'버튼이 생긴다
11.그리고, 이 'Edit'을 누르면 당연히 에러가 뜨는데, 왜냐하면, 이 Edit을 누른 후 어디로 연결되는지에 대한 '컨트롤러'가 없기 때문.
따라서, '관련 컨트롤러  @GetMapping("/articles/{id}/edit")' 작성해주고,
12.그 로직대로, '뷰 edit.mustache'로 옮겨가서, 여기에 해당하는 로직을 또 따름
13. '뷰 edit.mustache'의 로직 중에서, 아래 로직을 진행하고,
사용자가 여기 '뷰 edit.mustache'에서 무언가를 입력하고 'submit'을 누른다면, 아래의
(1)action="/articles/update"  (사용자에게 무슨 화면을 보여줄지(URL을 어디로 보내줄지))
(2)method="post" 방식  (어떻게 보여줄지 'CRUD'의 'Update(수정)' = 'HTTP'의 'PUT / PATCH(수정)')
//다만, 'form 태그 자체'가 'HTTP의 'GET(데이터 조회. @GetMapping)'과 'POST(데이터 생성. @PostMapping)''만 지원하기 때문에,
//여기서는, 'PUT(데이터 수정. @PutMapping)' 또는 'PATCH(데이터 수정. @PatchMapping)' 방식이 아니라,
//'임시로' 'POST(데이터 생성. @PostMapping)' 방식을 사용할 예정.
위 로직을 통해서,
이제 사용자에게 'http://localhost:9090/articles/update' 를 보여준다.
14. 사용자에게 'http://localhost:9090/articles/update' 를 보여주기 위해서는, 이 URL에 해당하는 '컨트롤러'가 있어야 하기 때문에
따라서, '관련 컨트롤러 @PostMapping("/articles/update")'를 작성해준다


< > : '개별 게시글' '삭제'하기 미션
15.'뷰 show.mustache'에 '<a href="/articles/{article.id}(원래는 대괄호 두 쌍임)/edit" class="btn btn-primary">Delete</a>'를 넣어줌
16.그리고, 이 요청URL을 받아줄 '삭제 관련 컨트롤러 @GetMapping("/articles/{id}/delete")' 작성해준다
cf)원래는 '@DeleteMapping()'인데, 'html'에서 '@DeleteMapping()'을 지원하지 않기 때문에, 임시로 '@GetMapping()'을 해줌
17.'삭제 관련 컨트롤러 @GetMapping("/articles/{id}/delete")'의 로직
('들어온 URL 요청에 해당하는 id값'이 'DB'에 있어서, 그 '해당하는 데이터'를 '삭제'시켜주는 것)
을 실행한 후, 삭제 미션을 완료했으니,
18.이제 다시 '게시판 글 목록 페이지'로 돌아감



< > :




-->


<form class="container" action="/articles/create" method="post">
<!--
    사용자가 여기 '뷰 new.mustache'에서 무언가를 입력하고 'submit'을 누른다면, 아래의
    (1)action="/articles/create"  (사용자에게 무슨 화면을 보여줄지(URL을 어디로 보내줄지))
    (2)method="post" 방식  (어떻게 보여줄지: 'CRUD'의 'Create(생성)' = 'HTTP'의 'POST(생성. @PostMapping)')
    로직을 통해서,
    이제 사용자에게 'http://localhost:9090/articles/create' 를 보여준다.
-->

    <div class="mb-3">
        <label class="form-label">title</label>
        <input type="text" class="form-control" name="title">


<!--'dto 객체'의 변수1 'title' 입력 ('name="content")     -->
    </div>
    <div class="mb-3">
        <label class="form-label">content</label>
        <textarea class="form-control" rows="3" name="content"></textarea>


<!--'dto 객체'의 변수2 'content' 입력 ('name="content")  -->
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>


<!--'a'태그의 '속성 href'는 '요청을 보낼(다른 링크로 사용자를 넘겨줄) 링크 주소를 가지고 있음'. 즉, '다른 링크로 넘겨주는 역할'을 하는 태그임.
이 태그에 속성값을 입력해줌으로써,
1.'화면 www.localhost:9090/articles/new'에서, 'Redirect(Back) Article' 탭이 보이고,
2.그 'Redirect Article'을 누르면, 'www.localhost:9090/articles'로 '다시 돌려보내줘서' '게시판 목록' 화면으로 돌아온다. -->
    <a href="/articles"/>Redirect(Back)Article</a>
</form>
{{>layouts/footer}}